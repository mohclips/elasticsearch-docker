# vim: set syntax=Logstash noai:ts=2:sw=2:et

filter {

    #
    # queries.log
    #
    if [message] =~ /FILTER/ {

      # dissect {
      #   id => "firewall_dissect"
      #   mapping => { 
      #     "message" => "%{logdate} queries: info: client @%{?hex} %{[client][ip]}#%{[client][port]} (%{?bind.query1}): query: %{[dns][question][name]} %{[dns][question][class]} %{[dns][question][type]} %{[dns][header_flags]} (%{[server][ip]})" 
      #     }
      #   add_tag => [ "draytek" ]
      # }

#2020-10-17 21:19:30 172.30.5.254 DrayTek:  [FILTER][Block][LAN/RT/VPN->WAN, 508:26:56    ][@S:R=3:2, 172.30.5.47:42279->114.114.114.114:53][UDP][HLen=20, TLen=56]
#2020-10-17 21:19:30 172.30.5.254 DrayTek:  [FILTER][Block][LAN/RT/VPN->WAN, 508:26:56    ][@S:R=3:2, 172.30.5.47:40973->8.8.8.8:53][UDP][HLen=20, TLen=56]
#2020-10-16 16:55:33 172.30.5.254 DrayTek:  [FILTER][Block][LAN/RT/VPN->WAN, 480:02:58    ][@S:R=2:4, 172.30.5.78:50759->10.183.43.146:445][TCP][HLen=20, TLen=52, Flag=S, Seq=209632765, Ack=0, Win=64240]
#2020-10-16 16:55:39 172.30.5.254 DrayTek:  [FILTER][Block][LAN/RT/VPN->WAN, 480:03:04    ][@S:R=2:4, 172.30.5.78:50759->10.183.43.146:445][TCP][HLen=20, TLen=52, Flag=S, Seq=209632765, Ack=0, Win=64240]

      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{IP:[observer][ip]}\s+DrayTek:\s+\[FILTER\]\[%{WORD:[event][action]}\]\[%{DATA:[network][direction]},\s+(?:.*)\s+\]\[@S:R=%{INT:[rule][ruleset]}:%{INT:[rule][id]},\s+%{IP:[client][ip]}:%{INT:[client][port]}->%{IP:[server][ip]}:%{INT:[server][port]}\]\[%{WORD:[network][transport]}\]\[%{DATA:[network][transport_data]}\]" }
      }


    # draytek FILTER
    } else {

      mutate {
        add_tag => [ "firewall_skipped" ]
      }
    }

    # date {
    #   #14-Jul-2020 20:25:01.365
    #   id => "firewall_date"
    #   match => [ "logdate", "dd-MMM-YYYY HH:mm:ss.SSS" ]
    #   # it's already Zulu
    #   timezone => "Etc/UTC"
    # }

    mutate {
      id => "firewall_cfg"
      copy => { "[agent][name]" => "[server][name]" }

      # copy client ip here, so we can resolve it and replace it with the DNS filter
      copy => { "[client][ip]" => "[client][address]" }
      copy => { "[server][ip]" => "[server][address]" }
    }

    if [client][ip] {
      # do a look up of the local ip
      dns {
        id => "firewall_dns_client"
        reverse => [ "[client][address]" ]

        nameserver => {
            address => ["172.30.5.253"]
        }

        action => "replace"
        hit_cache_size => 8000 
        hit_cache_ttl => 300 
        failed_cache_size => 1000 
        failed_cache_ttl => 300

        #hostsfile => [ "/usr/share/logstash/config/hostsfile" ]
      }
      mutate {
        id => "firewall_remove_homelan"
        gsub => [ "[client][address]", "\.homelan\.local", "" ]
      }
    }

    if [server][ip] {
      
      dns {
        id => "firewall_dns_server"
        reverse => [ "[server][address]" ]

        nameserver => {
            address => ["172.30.5.253"]
        }

        action => "replace"
        hit_cache_size => 8000 
        hit_cache_ttl => 300 
        failed_cache_size => 1000 
        failed_cache_ttl => 300

        #hostsfile => [ "/usr/share/logstash/config/hostsfile" ]
      }
      mutate {
        id => "firewall_remove_homelan_server"
        gsub => [ "[server][address]", "\.homelan\.local", "" ]
      }
    }

    if "firewall_skipped" not in [tags] {
      mutate {
        id => "firewall_rm_msg"
        remove_field => [ "message" ]
      }
    }

    # tidy
    mutate {
      id => "firewall_tidy"
      remove_field => [ "agent", "event", "logdate", "[log][offset]", "[log][file][path]", "host" ]
      remove_tag => [ "beats_input_codec_plain_applied" ]
    }

} # filter
